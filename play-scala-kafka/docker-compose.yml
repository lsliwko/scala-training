version: '3'
name: 'play-scala-kafka'  # containers are prefixed with name

services:
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners (external is for debugging from IDE)
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - app-tier

  # Creates Kafka topics and exits
  kafka-init-topics:
    image: 'bitnami/kafka:latest'
    # Here we create topic with ONE partition only, i.e. only one consumer will be able to connect and receive messages from 'play-scala-kafka-topic'
    command: "/opt/bitnami/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic play-scala-kafka-topic"
    depends_on:
      kafka:
        condition: service_started  # wait for Kafka to initialise
    networks:
      - app-tier

  # Main application
  app:
    build:
      context: .  # build from local Dockerfile
      no_cache: true
    restart: always
    depends_on:
      kafka-init-topics:
        condition: service_completed_successfully   # wait for Kafka topics to be created
    ports:
      - 9000:9000
    networks:
      - app-tier


networks:
  app-tier:
    driver: bridge

volumes:
  kafka_data:
    driver: local